// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20240217143736_ChangeNamingConventionForComments")]
    partial class ChangeNamingConventionForComments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Auth.Email", b =>
                {
                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Value")
                        .HasName("pk_emails");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_emails_user_id");

                    b.ToTable("emails", (string)null);
                });

            modelBuilder.Entity("Domain.Auth.SocialAccount", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_social_accounts");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_social_accounts_user_id");

                    b.ToTable("social_accounts", (string)null);
                });

            modelBuilder.Entity("Domain.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("Company")
                        .HasColumnType("text")
                        .HasColumnName("company");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("GitToken")
                        .HasColumnType("text")
                        .HasColumnName("git_token");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<int>("NotificationPreferences")
                        .HasColumnType("integer")
                        .HasColumnName("notification_preferences");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("PrimaryEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("primary_email");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PrimaryEmail")
                        .IsUnique()
                        .HasDatabaseName("ix_users_primary_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Branches.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedFrom")
                        .HasColumnType("text")
                        .HasColumnName("created_from");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.HasKey("Id")
                        .HasName("pk_branches");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_branches_owner_id");

                    b.HasIndex("RepositoryId")
                        .HasDatabaseName("ix_branches_repository_id");

                    b.HasIndex("Name", "RepositoryId")
                        .IsUnique()
                        .HasDatabaseName("ix_branches_name_repository_id");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_comments_creator_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_comments_task_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.Milestones.Milestone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean")
                        .HasColumnName("closed");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_milestones");

                    b.HasIndex("RepositoryId")
                        .HasDatabaseName("ix_milestones_repository_id");

                    b.ToTable("milestones", (string)null);
                });

            modelBuilder.Entity("Domain.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_time");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notifications_user_id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Domain.Organizations.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact_email");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<int?>("memberTeamId")
                        .HasColumnType("integer")
                        .HasColumnName("member_team_id");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.ToTable("organizations", (string)null);
                });

            modelBuilder.Entity("Domain.Organizations.OrganizationInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_organization_invites");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_organization_invites_user_id");

                    b.HasIndex("OrganizationId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_organization_invites_organization_id_user_id");

                    b.ToTable("organization_invites", (string)null);
                });

            modelBuilder.Entity("Domain.Organizations.OrganizationMember", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("OrganizationId", "MemberId")
                        .HasName("pk_organization_members");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_organization_members_member_id");

                    b.ToTable("organization_members", (string)null);
                });

            modelBuilder.Entity("Domain.Reactions.Reaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<string>("EmojiCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("emoji_code");

                    b.HasKey("Id")
                        .HasName("pk_reactions");

                    b.HasIndex("CommentId")
                        .HasDatabaseName("ix_reactions_comment_id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_reactions_creator_id");

                    b.ToTable("reactions", (string)null);
                });

            modelBuilder.Entity("Domain.Repositories.Repository", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HttpCloneUrl")
                        .HasColumnType("text")
                        .HasColumnName("http_clone_url");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid")
                        .HasColumnName("organization_id");

                    b.Property<string>("SshCloneUrl")
                        .HasColumnType("text")
                        .HasColumnName("ssh_clone_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_repositories");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_repositories_organization_id");

                    b.ToTable("repositories", (string)null);
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryFork", b =>
                {
                    b.Property<Guid>("SourceRepoId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_repo_id");

                    b.Property<Guid>("ForkedRepoId")
                        .HasColumnType("uuid")
                        .HasColumnName("forked_repo_id");

                    b.HasKey("SourceRepoId", "ForkedRepoId")
                        .HasName("pk_repository_forks");

                    b.HasIndex("ForkedRepoId")
                        .IsUnique()
                        .HasDatabaseName("ix_repository_forks_forked_repo_id");

                    b.ToTable("repository_forks", (string)null);
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryInvite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_repository_invites");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_repository_invites_user_id");

                    b.HasIndex("RepositoryId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_repository_invites_repository_id_user_id");

                    b.ToTable("repository_invites", (string)null);
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_id");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("pk_repository_members");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_repository_members_member_id");

                    b.HasIndex("RepositoryId")
                        .HasDatabaseName("ix_repository_members_repository_id");

                    b.ToTable("repository_members", (string)null);
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryWatcher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("WatchingPreferences")
                        .HasColumnType("integer")
                        .HasColumnName("watching_preferences");

                    b.HasKey("Id")
                        .HasName("pk_repository_watchers");

                    b.HasIndex("RepositoryId")
                        .HasDatabaseName("ix_repository_watchers_repository_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_repository_watchers_user_id");

                    b.ToTable("repository_watchers", (string)null);
                });

            modelBuilder.Entity("Domain.Tasks.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("creator_id");

                    b.Property<int>("EventType")
                        .HasColumnType("integer")
                        .HasColumnName("event_type");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_events_creator_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_events_task_id");

                    b.ToTable("events", (string)null);

                    b.HasDiscriminator<int>("EventType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Tasks.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefaultLabel")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default_label");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_labels");

                    b.HasIndex("RepositoryId")
                        .HasDatabaseName("ix_labels_repository_id");

                    b.HasIndex("Title", "RepositoryId", "IsDefaultLabel")
                        .IsUnique()
                        .HasDatabaseName("ix_labels_title_repository_id_is_default_label");

                    b.ToTable("labels", (string)null);
                });

            modelBuilder.Entity("Domain.Tasks.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uuid")
                        .HasColumnName("milestone_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid>("RepositoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("repository_id");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("MilestoneId")
                        .HasDatabaseName("ix_tasks_milestone_id");

                    b.HasIndex("RepositoryId")
                        .HasDatabaseName("ix_tasks_repository_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tasks_user_id");

                    b.ToTable("tasks", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IssuePullRequest", b =>
                {
                    b.Property<Guid>("IssuesId")
                        .HasColumnType("uuid")
                        .HasColumnName("issues_id");

                    b.Property<Guid>("PullRequestsId")
                        .HasColumnType("uuid")
                        .HasColumnName("pull_requests_id");

                    b.HasKey("IssuesId", "PullRequestsId")
                        .HasName("pk_issue_pull_request");

                    b.HasIndex("PullRequestsId")
                        .HasDatabaseName("ix_issue_pull_request_pull_requests_id");

                    b.ToTable("issue_pull_request", (string)null);
                });

            modelBuilder.Entity("LabelTask", b =>
                {
                    b.Property<Guid>("LabelsId")
                        .HasColumnType("uuid")
                        .HasColumnName("labels_id");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uuid")
                        .HasColumnName("tasks_id");

                    b.HasKey("LabelsId", "TasksId")
                        .HasName("pk_label_task");

                    b.HasIndex("TasksId")
                        .HasDatabaseName("ix_label_task_tasks_id");

                    b.ToTable("label_task", (string)null);
                });

            modelBuilder.Entity("RepositoryMemberTask", b =>
                {
                    b.Property<Guid>("AssigneesId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignees_id");

                    b.Property<Guid>("TasksId")
                        .HasColumnType("uuid")
                        .HasColumnName("tasks_id");

                    b.HasKey("AssigneesId", "TasksId")
                        .HasName("pk_repository_member_task");

                    b.HasIndex("TasksId")
                        .HasDatabaseName("ix_repository_member_task_tasks_id");

                    b.ToTable("repository_member_task", (string)null);
                });

            modelBuilder.Entity("RepositoryUser", b =>
                {
                    b.Property<Guid>("StarredById")
                        .HasColumnType("uuid")
                        .HasColumnName("starred_by_id");

                    b.Property<Guid>("StarredId")
                        .HasColumnType("uuid")
                        .HasColumnName("starred_id");

                    b.HasKey("StarredById", "StarredId")
                        .HasName("pk_repository_user");

                    b.HasIndex("StarredId")
                        .HasDatabaseName("ix_repository_user_starred_id");

                    b.ToTable("repository_user", (string)null);
                });

            modelBuilder.Entity("Domain.Tasks.AddIssueToPullRequestEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_events_issue_id");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("Domain.Tasks.AssignEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignee_id");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_events_assignee_id1");

                    b.ToTable("events", t =>
                        {
                            t.Property("AssigneeId")
                                .HasColumnName("assign_event_assignee_id");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Domain.Tasks.AssignPullRequestEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignee_id");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_events_assignee_id");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("Domain.Tasks.CloseEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Domain.Tasks.Interfaces.AssignLabelEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid")
                        .HasColumnName("label_id");

                    b.HasIndex("LabelId")
                        .HasDatabaseName("ix_events_label_id");

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("Domain.Tasks.Interfaces.AssignMilestoneEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uuid")
                        .HasColumnName("milestone_id");

                    b.HasIndex("MilestoneId")
                        .HasDatabaseName("ix_events_milestone_id");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Domain.Tasks.Interfaces.UnassignLabelEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("LabelId")
                        .HasColumnType("uuid")
                        .HasColumnName("label_id");

                    b.HasIndex("LabelId")
                        .HasDatabaseName("ix_events_label_id1");

                    b.ToTable("events", t =>
                        {
                            t.Property("LabelId")
                                .HasColumnName("unassign_label_event_label_id");
                        });

                    b.HasDiscriminator().HasValue(12);
                });

            modelBuilder.Entity("Domain.Tasks.PullRequestMergedEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("Domain.Tasks.RemoveIssueFromPullRequestEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("IssueId")
                        .HasColumnType("uuid")
                        .HasColumnName("issue_id");

                    b.HasIndex("IssueId")
                        .HasDatabaseName("ix_events_issue_id1");

                    b.ToTable("events", t =>
                        {
                            t.Property("IssueId")
                                .HasColumnName("remove_issue_from_pull_request_event_issue_id");
                        });

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("Domain.Tasks.UnassignEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignee_id");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_events_assignee_id2");

                    b.ToTable("events", t =>
                        {
                            t.Property("AssigneeId")
                                .HasColumnName("unassign_event_assignee_id");
                        });

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Domain.Tasks.UnassignMilestoneEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid?>("MilestoneId")
                        .HasColumnType("uuid")
                        .HasColumnName("milestone_id");

                    b.HasIndex("MilestoneId")
                        .HasDatabaseName("ix_events_milestone_id1");

                    b.ToTable("events", t =>
                        {
                            t.Property("MilestoneId")
                                .HasColumnName("unassign_milestone_event_milestone_id");
                        });

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("Domain.Tasks.UnnassignPullRequestEvent", b =>
                {
                    b.HasBaseType("Domain.Tasks.Event");

                    b.Property<Guid>("AssigneeId")
                        .HasColumnType("uuid")
                        .HasColumnName("assignee_id");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("ix_events_assignee_id3");

                    b.ToTable("events", t =>
                        {
                            t.Property("AssigneeId")
                                .HasColumnName("unnassign_pull_request_event_assignee_id");
                        });

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("Domain.Tasks.Issue", b =>
                {
                    b.HasBaseType("Domain.Tasks.Task");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Domain.Tasks.PullRequest", b =>
                {
                    b.HasBaseType("Domain.Tasks.Task");

                    b.Property<Guid>("FromBranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_branch_id");

                    b.Property<int?>("GitPullRequestId")
                        .HasColumnType("integer")
                        .HasColumnName("git_pull_request_id");

                    b.Property<Guid>("ToBranchId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_branch_id");

                    b.HasIndex("FromBranchId")
                        .HasDatabaseName("ix_tasks_from_branch_id");

                    b.HasIndex("ToBranchId")
                        .HasDatabaseName("ix_tasks_to_branch_id");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Domain.Auth.Email", b =>
                {
                    b.HasOne("Domain.Auth.User", "User")
                        .WithMany("SecondaryEmails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_emails_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Auth.SocialAccount", b =>
                {
                    b.HasOne("Domain.Auth.User", "User")
                        .WithMany("SocialAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_social_accounts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Branches.Branch", b =>
                {
                    b.HasOne("Domain.Auth.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_branches_users_owner_id");

                    b.HasOne("Domain.Repositories.Repository", "Repository")
                        .WithMany("Branches")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_branches_repositories_repository_id");

                    b.Navigation("Owner");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_creator_id");

                    b.HasOne("Domain.Tasks.Task", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_tasks_task_id");

                    b.Navigation("Creator");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Domain.Milestones.Milestone", b =>
                {
                    b.HasOne("Domain.Repositories.Repository", "Repository")
                        .WithMany("Milestones")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_milestones_repositories_repository_id");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Domain.Notifications.Notification", b =>
                {
                    b.HasOne("Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Organizations.OrganizationInvite", b =>
                {
                    b.HasOne("Domain.Organizations.Organization", "Organization")
                        .WithMany("PendingInvites")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_invites_organizations_organization_id");

                    b.HasOne("Domain.Auth.User", "User")
                        .WithMany("OrganizationInvites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_invites_users_user_id");

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Organizations.OrganizationMember", b =>
                {
                    b.HasOne("Domain.Auth.User", "Member")
                        .WithMany("Members")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_members_users_member_id");

                    b.HasOne("Domain.Organizations.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_organization_members_organizations_organization_id");

                    b.Navigation("Member");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Reactions.Reaction", b =>
                {
                    b.HasOne("Domain.Comments.Comment", "Comment")
                        .WithMany("Reactions")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_comments_comment_id");

                    b.HasOne("Domain.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reactions_users_creator_id");

                    b.Navigation("Comment");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Repositories.Repository", b =>
                {
                    b.HasOne("Domain.Organizations.Organization", "Organization")
                        .WithMany("Repositories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_repositories_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryFork", b =>
                {
                    b.HasOne("Domain.Repositories.Repository", "ForkedRepo")
                        .WithOne("ForkedFrom")
                        .HasForeignKey("Domain.Repositories.RepositoryFork", "ForkedRepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_forks_repositories_forked_repo_id");

                    b.HasOne("Domain.Repositories.Repository", "SourceRepo")
                        .WithMany("RepositoryForks")
                        .HasForeignKey("SourceRepoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_forks_repositories_source_repo_id");

                    b.Navigation("ForkedRepo");

                    b.Navigation("SourceRepo");
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryInvite", b =>
                {
                    b.HasOne("Domain.Repositories.Repository", "Repository")
                        .WithMany("PendingInvites")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_invites_repositories_repository_id");

                    b.HasOne("Domain.Auth.User", "User")
                        .WithMany("RepositoryInvites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_invites_users_user_id");

                    b.Navigation("Repository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryMember", b =>
                {
                    b.HasOne("Domain.Auth.User", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_members_users_member_id");

                    b.HasOne("Domain.Repositories.Repository", "Repository")
                        .WithMany("Members")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_members_repositories_repository_id");

                    b.Navigation("Member");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryWatcher", b =>
                {
                    b.HasOne("Domain.Repositories.Repository", "Repository")
                        .WithMany("WatchedBy")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_watchers_repositories_repository_id");

                    b.HasOne("Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_watchers_users_user_id");

                    b.Navigation("Repository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Tasks.Event", b =>
                {
                    b.HasOne("Domain.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_users_creator_id");

                    b.HasOne("Domain.Tasks.Task", "Task")
                        .WithMany("Events")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_tasks_task_id");

                    b.Navigation("Creator");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Domain.Tasks.Label", b =>
                {
                    b.HasOne("Domain.Repositories.Repository", "Repository")
                        .WithMany("Labels")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_labels_repositories_repository_id");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("Domain.Tasks.Task", b =>
                {
                    b.HasOne("Domain.Milestones.Milestone", "Milestone")
                        .WithMany("Tasks")
                        .HasForeignKey("MilestoneId")
                        .HasConstraintName("fk_tasks_milestones_milestone_id");

                    b.HasOne("Domain.Repositories.Repository", "Repository")
                        .WithMany("Tasks")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_repositories_repository_id");

                    b.HasOne("Domain.Auth.User", "Creator")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_users_user_id");

                    b.Navigation("Creator");

                    b.Navigation("Milestone");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("IssuePullRequest", b =>
                {
                    b.HasOne("Domain.Tasks.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_pull_request_tasks_issues_id");

                    b.HasOne("Domain.Tasks.PullRequest", null)
                        .WithMany()
                        .HasForeignKey("PullRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_issue_pull_request_tasks_pull_requests_id");
                });

            modelBuilder.Entity("LabelTask", b =>
                {
                    b.HasOne("Domain.Tasks.Label", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_task_labels_labels_id");

                    b.HasOne("Domain.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_label_task_tasks_tasks_id");
                });

            modelBuilder.Entity("RepositoryMemberTask", b =>
                {
                    b.HasOne("Domain.Repositories.RepositoryMember", null)
                        .WithMany()
                        .HasForeignKey("AssigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_member_task_repository_members_assignees_id");

                    b.HasOne("Domain.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_member_task_tasks_tasks_id");
                });

            modelBuilder.Entity("RepositoryUser", b =>
                {
                    b.HasOne("Domain.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("StarredById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_user_users_starred_by_id");

                    b.HasOne("Domain.Repositories.Repository", null)
                        .WithMany()
                        .HasForeignKey("StarredId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_repository_user_repositories_starred_id");
                });

            modelBuilder.Entity("Domain.Tasks.AddIssueToPullRequestEvent", b =>
                {
                    b.HasOne("Domain.Tasks.Issue", "Issue")
                        .WithMany("AddPullRequestEvents")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_add_issue_to_pull_request_event_tasks_issue_id1");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Domain.Tasks.AssignEvent", b =>
                {
                    b.HasOne("Domain.Repositories.RepositoryMember", "Assignee")
                        .WithMany("AssignEvents")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assign_event_repository_members_assignee_id");

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("Domain.Tasks.AssignPullRequestEvent", b =>
                {
                    b.HasOne("Domain.Repositories.RepositoryMember", "Assignee")
                        .WithMany("AssignPullRequestEvents")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_assign_pull_request_event_repository_members_repository_member");

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("Domain.Tasks.Interfaces.AssignLabelEvent", b =>
                {
                    b.HasOne("Domain.Tasks.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_labels_label_id");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("Domain.Tasks.Interfaces.AssignMilestoneEvent", b =>
                {
                    b.HasOne("Domain.Milestones.Milestone", "Milestone")
                        .WithMany()
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_milestones_milestone_id");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("Domain.Tasks.Interfaces.UnassignLabelEvent", b =>
                {
                    b.HasOne("Domain.Tasks.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_labels_label_id1");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("Domain.Tasks.RemoveIssueFromPullRequestEvent", b =>
                {
                    b.HasOne("Domain.Tasks.Issue", "Issue")
                        .WithMany("RemovePullRequestEvents")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_remove_issue_from_pull_request_event_tasks_issue_id1");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Domain.Tasks.UnassignEvent", b =>
                {
                    b.HasOne("Domain.Repositories.RepositoryMember", "Assignee")
                        .WithMany("UnassignEvents")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unassign_event_repository_members_assignee_id");

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("Domain.Tasks.UnassignMilestoneEvent", b =>
                {
                    b.HasOne("Domain.Milestones.Milestone", "Milestone")
                        .WithMany()
                        .HasForeignKey("MilestoneId")
                        .HasConstraintName("fk_events_milestones_milestone_id1");

                    b.Navigation("Milestone");
                });

            modelBuilder.Entity("Domain.Tasks.UnnassignPullRequestEvent", b =>
                {
                    b.HasOne("Domain.Repositories.RepositoryMember", "Assignee")
                        .WithMany("UnnassignPullRequestEvents")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_unnassign_pull_request_event_repository_members_repository_mem");

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("Domain.Tasks.PullRequest", b =>
                {
                    b.HasOne("Domain.Branches.Branch", "FromBranch")
                        .WithMany("FromPullRequests")
                        .HasForeignKey("FromBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_branches_from_branch_id");

                    b.HasOne("Domain.Branches.Branch", "ToBranch")
                        .WithMany("ToPullRequests")
                        .HasForeignKey("ToBranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_branches_to_branch_id");

                    b.Navigation("FromBranch");

                    b.Navigation("ToBranch");
                });

            modelBuilder.Entity("Domain.Auth.User", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("OrganizationInvites");

                    b.Navigation("RepositoryInvites");

                    b.Navigation("SecondaryEmails");

                    b.Navigation("SocialAccounts");
                });

            modelBuilder.Entity("Domain.Branches.Branch", b =>
                {
                    b.Navigation("FromPullRequests");

                    b.Navigation("ToPullRequests");
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Domain.Milestones.Milestone", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Organizations.Organization", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("PendingInvites");

                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("Domain.Repositories.Repository", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("ForkedFrom");

                    b.Navigation("Labels");

                    b.Navigation("Members");

                    b.Navigation("Milestones");

                    b.Navigation("PendingInvites");

                    b.Navigation("RepositoryForks");

                    b.Navigation("Tasks");

                    b.Navigation("WatchedBy");
                });

            modelBuilder.Entity("Domain.Repositories.RepositoryMember", b =>
                {
                    b.Navigation("AssignEvents");

                    b.Navigation("AssignPullRequestEvents");

                    b.Navigation("UnassignEvents");

                    b.Navigation("UnnassignPullRequestEvents");
                });

            modelBuilder.Entity("Domain.Tasks.Task", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Events");
                });

            modelBuilder.Entity("Domain.Tasks.Issue", b =>
                {
                    b.Navigation("AddPullRequestEvents");

                    b.Navigation("RemovePullRequestEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
